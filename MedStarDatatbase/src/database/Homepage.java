/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package database;

import java.awt.CardLayout;
import java.awt.Image;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import javax.sql.*;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;

import java.net.URL;

/**
 *
 * @author aenyi
 */
public class Homepage extends javax.swing.JFrame {
    
    String username;
    String pass;

    /**
     * Creates new form Homepage
     */
    public Homepage() {
        initComponents();
        resizeImage();
    }
    
    public void resizeImage() {
        URL url = this.getClass().getResource("/database/2560px-MedStar_Health_logo.svg.png");
        ImageIcon icon =  new javax.swing.ImageIcon(url);
        Image img = icon.getImage();
        Image imgScaled = img.getScaledInstance(loginLabel.getWidth(), loginLabel.getHeight(), Image.SCALE_DEFAULT);
        ImageIcon scaled = new ImageIcon(imgScaled);
        loginLabel.setIcon(scaled);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane15 = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        loginPanel = new javax.swing.JPanel();
        passField = new javax.swing.JPasswordField();
        userField = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        loginLabel = new javax.swing.JLabel();
        homePanel = new javax.swing.JPanel();
        tabs = new javax.swing.JTabbedPane();
        hospitalTab = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        hospitalTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        hDepartments = new javax.swing.JTable();
        hButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        hTypes = new javax.swing.JTable();
        hManagerList = new javax.swing.JComboBox<>();
        hManagerButton = new javax.swing.JButton();
        hDeptList = new javax.swing.JComboBox<>();
        hDirectorList = new javax.swing.JComboBox<>();
        hDirectorButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        staffTab = new javax.swing.JPanel();
        staffMultTab = new javax.swing.JTabbedPane();
        allStaff = new javax.swing.JPanel();
        dispStaffTableBox = new javax.swing.JScrollPane();
        staffTable = new javax.swing.JTable();
        infoStaffTableBox = new javax.swing.JScrollPane();
        staffInfoTable = new javax.swing.JTable();
        staffInfoButton = new javax.swing.JButton();
        staffUpdateButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        sExtraInfo = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        sPhones = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        sContact = new javax.swing.JTable();
        sDelete = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        sExtraInfo2 = new javax.swing.JTable();
        updateStaffTab = new javax.swing.JPanel();
        sFNameLab = new javax.swing.JLabel();
        sFName = new javax.swing.JTextField();
        sMInitLab = new javax.swing.JLabel();
        sMInit = new javax.swing.JTextField();
        sLNameLab = new javax.swing.JLabel();
        sLName = new javax.swing.JTextField();
        sGenLab = new javax.swing.JLabel();
        sPerm = new javax.swing.JComboBox<>();
        sDobLab = new javax.swing.JLabel();
        sDob = new javax.swing.JFormattedTextField();
        sStreetLab = new javax.swing.JLabel();
        sStreet = new javax.swing.JTextField();
        sStreet2Lab = new javax.swing.JLabel();
        sStreet2 = new javax.swing.JTextField();
        sCityLab = new javax.swing.JLabel();
        sCity = new javax.swing.JTextField();
        sStateLab = new javax.swing.JLabel();
        sState = new javax.swing.JTextField();
        sZipLab = new javax.swing.JLabel();
        sZip = new javax.swing.JTextField();
        sSsnLab = new javax.swing.JLabel();
        sSsn = new javax.swing.JTextField();
        sSuperSsnLab = new javax.swing.JLabel();
        sPhoneLab = new javax.swing.JLabel();
        sPhone = new javax.swing.JTextField();
        sEmergLab = new javax.swing.JLabel();
        sEmergency = new javax.swing.JTextField();
        sTeamLeadLab = new javax.swing.JLabel();
        sHosNumLab = new javax.swing.JLabel();
        sDeptNumLab = new javax.swing.JLabel();
        sTitleLab = new javax.swing.JLabel();
        sTitle = new javax.swing.JComboBox<>();
        sSalaryLab = new javax.swing.JLabel();
        sSalary = new javax.swing.JTextField();
        sHireLab = new javax.swing.JLabel();
        sHireDate = new javax.swing.JTextField();
        addStaffButton = new javax.swing.JButton();
        sDocList = new javax.swing.JComboBox<>();
        sTLSsn = new javax.swing.JComboBox<>();
        sDocListLab = new javax.swing.JLabel();
        sDocLic = new javax.swing.JTextField();
        sNurseDegreeLab = new javax.swing.JLabel();
        sNurseDegree = new javax.swing.JTextField();
        sPermLab = new javax.swing.JLabel();
        sDeptNum = new javax.swing.JComboBox<>();
        sHospNum = new javax.swing.JComboBox<>();
        sDocLab = new javax.swing.JLabel();
        sGender = new javax.swing.JComboBox<>();
        sSuperSsn = new javax.swing.JComboBox<>();
        sClearButton = new javax.swing.JButton();
        patientTab = new javax.swing.JPanel();
        patientMultTab = new javax.swing.JTabbedPane();
        allPatients = new javax.swing.JPanel();
        dispPatientTableBox = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        infoPatientTableBox = new javax.swing.JScrollPane();
        patientInfoTable = new javax.swing.JTable();
        patientInfoButton = new javax.swing.JButton();
        patientUpdateButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        pTreatments = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        pBills = new javax.swing.JTable();
        pTreat = new javax.swing.JTextField();
        pTreatButton = new javax.swing.JButton();
        pBillNum = new javax.swing.JTextField();
        pAmount = new javax.swing.JTextField();
        pChargeButton = new javax.swing.JButton();
        pDescription = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        pPhoneTable = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        pContactTable = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        pTotalCharge = new javax.swing.JTable();
        pDelete = new javax.swing.JButton();
        updatePatientTab = new javax.swing.JPanel();
        pFNameLab = new javax.swing.JLabel();
        pFName = new javax.swing.JTextField();
        pMInitLab = new javax.swing.JLabel();
        pMInit = new javax.swing.JTextField();
        pLNameLab = new javax.swing.JLabel();
        pLName = new javax.swing.JTextField();
        pGenLab = new javax.swing.JLabel();
        pGender = new javax.swing.JComboBox<>();
        pDobLab = new javax.swing.JLabel();
        pDob = new javax.swing.JFormattedTextField();
        pStreetLab = new javax.swing.JLabel();
        pStreet = new javax.swing.JTextField();
        pStreet2Lab = new javax.swing.JLabel();
        pStreet2 = new javax.swing.JTextField();
        pCityLab = new javax.swing.JLabel();
        pCity = new javax.swing.JTextField();
        pStateLab = new javax.swing.JLabel();
        pState = new javax.swing.JTextField();
        pZipLab = new javax.swing.JLabel();
        pZip = new javax.swing.JTextField();
        pInsLab = new javax.swing.JLabel();
        pInsurance = new javax.swing.JTextField();
        pSsnLab = new javax.swing.JLabel();
        pSsn = new javax.swing.JTextField();
        pPhoneLab = new javax.swing.JLabel();
        pPhone = new javax.swing.JTextField();
        pEmergLab = new javax.swing.JLabel();
        pEmergency = new javax.swing.JTextField();
        pDocSsnLab = new javax.swing.JLabel();
        pHosNumLab = new javax.swing.JLabel();
        pRoomNoLab = new javax.swing.JLabel();
        pTypeLab = new javax.swing.JLabel();
        pType = new javax.swing.JComboBox<>();
        pCheckInLab = new javax.swing.JLabel();
        pCheckIn = new javax.swing.JTextField();
        pCheckOutLab = new javax.swing.JLabel();
        pCheckOut = new javax.swing.JTextField();
        addPatientButton = new javax.swing.JButton();
        pHospNum = new javax.swing.JComboBox<>();
        pRoomNum = new javax.swing.JComboBox<>();
        pDoc = new javax.swing.JComboBox<>();
        pClearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Homepage");
        setBackground(new java.awt.Color(99, 187, 191));
        setSize(new java.awt.Dimension(0, 0));

        jScrollPane15.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        mainPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        mainPanel.setOpaque(false);
        mainPanel.setPreferredSize(new java.awt.Dimension(672, 750));
        mainPanel.setLayout(new java.awt.CardLayout());

        loginPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        loginPanel.setInheritsPopupMenu(true);
        loginPanel.setPreferredSize(new java.awt.Dimension(500, 500));

        passField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passFieldActionPerformed(evt);
            }
        });

        userField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                userFieldPropertyChange(evt);
            }
        });

        jLabel1.setLabelFor(userField);
        jLabel1.setText("Username:");

        jLabel2.setLabelFor(passField);
        jLabel2.setText("Password:");

        jButton1.setText("Login");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loginPanelLayout = new javax.swing.GroupLayout(loginPanel);
        loginPanel.setLayout(loginPanelLayout);
        loginPanelLayout.setHorizontalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loginLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(loginPanelLayout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(loginPanelLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2))
                            .addGroup(loginPanelLayout.createSequentialGroup()
                                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(userField)
                                    .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(128, Short.MAX_VALUE))
        );
        loginPanelLayout.setVerticalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(loginLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(304, Short.MAX_VALUE))
        );

        mainPanel.add(loginPanel, "login");

        hospitalTable.setModel(makeTable("SELECT hNo as Number, hName as Hospital FROM Hospital;"));
        hospitalTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        hospitalTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        hospitalTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane13.setViewportView(hospitalTable);

        hDepartments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(hDepartments);

        hButton.setText("More Info");
        hButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hButtonActionPerformed(evt);
            }
        });

        hTypes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(hTypes);

        hManagerList.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT SSN FROM Manager")));
        hManagerList.setEnabled(false);

        hManagerButton.setText("Set Manager");
        hManagerButton.setEnabled(false);
        hManagerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hManagerButtonActionPerformed(evt);
            }
        });

        hDeptList.setEnabled(false);

        hDirectorList.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT SSN FROM Director")));
        hDirectorList.setEnabled(false);

        hDirectorButton.setText("Set Director");
        hDirectorButton.setEnabled(false);
        hDirectorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hDirectorButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Department");

        jLabel4.setText("Managers");

        jLabel5.setText("Directors");

        javax.swing.GroupLayout hospitalTabLayout = new javax.swing.GroupLayout(hospitalTab);
        hospitalTab.setLayout(hospitalTabLayout);
        hospitalTabLayout.setHorizontalGroup(
            hospitalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hospitalTabLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(hospitalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(hospitalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(hospitalTabLayout.createSequentialGroup()
                            .addGroup(hospitalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(hospitalTabLayout.createSequentialGroup()
                                    .addComponent(hDeptList, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(hManagerList, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(hManagerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(hospitalTabLayout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(hospitalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(hospitalTabLayout.createSequentialGroup()
                                    .addComponent(hDirectorList, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(hDirectorButton, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))
                                .addGroup(hospitalTabLayout.createSequentialGroup()
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE))))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        hospitalTabLayout.setVerticalGroup(
            hospitalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hospitalTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(hButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(hospitalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(hospitalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hManagerList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hManagerButton)
                    .addComponent(hDeptList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hDirectorList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hDirectorButton))
                .addContainerGap(168, Short.MAX_VALUE))
        );

        tabs.addTab("Hospital", hospitalTab);

        allStaff.setAutoscrolls(true);
        allStaff.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dispStaffTableBox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        staffTable.setModel(makeTable("SELECT DISTINCT SSN, CONCAT(fname,' ', mint,'. ', lname) as Name, title as Title FROM Staff, Person WHERE SSN=eSSN"));
        staffTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        staffTable.setRowSelectionAllowed(true);
        staffTable.setColumnSelectionAllowed(true);
        staffTable.setCellSelectionEnabled(true);
        staffTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        staffTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dispStaffTableBox.setViewportView(staffTable);

        allStaff.add(dispStaffTableBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 570, 230));

        staffInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        staffInfoTable.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        infoStaffTableBox.setViewportView(staffInfoTable);

        allStaff.add(infoStaffTableBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 570, 150));

        staffInfoButton.setText("More Info");
        staffInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffInfoButtonActionPerformed(evt);
            }
        });
        allStaff.add(staffInfoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 110, 30));

        staffUpdateButton.setText("Update Staff");
        staffUpdateButton.setEnabled(false);
        staffUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffUpdateButtonActionPerformed(evt);
            }
        });
        allStaff.add(staffUpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 100, 30));

        sExtraInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        sExtraInfo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sExtraInfo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        sExtraInfo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(sExtraInfo);

        allStaff.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 520, 570, 70));

        sPhones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(sPhones);

        allStaff.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 460, 180, 50));

        sContact.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane7.setViewportView(sContact);

        allStaff.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 460, 200, 50));

        sDelete.setText("Delete Staff");
        sDelete.setEnabled(false);
        sDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sDeleteActionPerformed(evt);
            }
        });
        allStaff.add(sDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 260, 110, 30));

        sExtraInfo2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane11.setViewportView(sExtraInfo2);

        allStaff.add(jScrollPane11, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 460, 170, 50));

        staffMultTab.addTab("All Staff", allStaff);

        updateStaffTab.setBackground(new java.awt.Color(219, 196, 113));
        updateStaffTab.setAutoscrolls(true);
        updateStaffTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sFNameLab.setText("First Name");
        updateStaffTab.add(sFNameLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));
        updateStaffTab.add(sFName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 180, -1));

        sMInitLab.setText("Middle I.");
        updateStaffTab.add(sMInitLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        sMInit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sMInitActionPerformed(evt);
            }
        });
        updateStaffTab.add(sMInit, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, 180, -1));

        sLNameLab.setText("Last Name");
        updateStaffTab.add(sLNameLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        sLName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sLNameActionPerformed(evt);
            }
        });
        updateStaffTab.add(sLName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, 180, -1));

        sGenLab.setText("Gender");
        updateStaffTab.add(sGenLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        sPerm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Y", "N" }));
        sPerm.setVisible(false);
        sPerm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sPermActionPerformed(evt);
            }
        });
        updateStaffTab.add(sPerm, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 290, 60, -1));

        sDobLab.setText("DOB");
        updateStaffTab.add(sDobLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 120, -1, -1));

        sDob.setColumns(10);
        sDob.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        sDob.setText("YYYY-MM-dd");
        updateStaffTab.add(sDob, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 120, 140, -1));

        sStreetLab.setText("Street");
        updateStaffTab.add(sStreetLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));
        updateStaffTab.add(sStreet, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 280, -1));

        sStreet2Lab.setText("Street 2");
        updateStaffTab.add(sStreet2Lab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));
        updateStaffTab.add(sStreet2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 180, 280, -1));

        sCityLab.setText("City");
        updateStaffTab.add(sCityLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 120, -1, -1));
        updateStaffTab.add(sCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 120, 160, -1));

        sStateLab.setText("State");
        updateStaffTab.add(sStateLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 150, -1, -1));

        sState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sStateActionPerformed(evt);
            }
        });
        updateStaffTab.add(sState, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 150, 150, -1));

        sZipLab.setText("Zip Code");
        updateStaffTab.add(sZipLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 180, -1, -1));

        sZip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sZipActionPerformed(evt);
            }
        });
        updateStaffTab.add(sZip, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 180, 130, -1));

        sSsnLab.setText("SSN");
        updateStaffTab.add(sSsnLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 30, -1, -1));

        sSsn.setText("#########");
        updateStaffTab.add(sSsn, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 30, 270, -1));

        sSuperSsnLab.setText("Supervisor SSN");
        updateStaffTab.add(sSuperSsnLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 220, -1, -1));

        sPhoneLab.setText("Phone Number");
        updateStaffTab.add(sPhoneLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 60, -1, -1));

        sPhone.setText("+# ### ### ####");
        updateStaffTab.add(sPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 60, 210, -1));

        sEmergLab.setText("Emergency Contact");
        updateStaffTab.add(sEmergLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, -1, -1));

        sEmergency.setText("+1 ### ### ####");
        updateStaffTab.add(sEmergency, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 90, 190, -1));

        sTeamLeadLab.setText("Team Leader SSN");
        updateStaffTab.add(sTeamLeadLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 250, -1, 20));

        sHosNumLab.setText("Dept. Number");
        updateStaffTab.add(sHosNumLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 220, -1, -1));

        sDeptNumLab.setText("Hospital Number");
        updateStaffTab.add(sDeptNumLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        sTitleLab.setText("Title");
        updateStaffTab.add(sTitleLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, -1, -1));

        sTitle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Doctor", "Nurse", "Manager", "Director", "Supervisor", "Team Lead" }));
        sTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sTitleActionPerformed(evt);
            }
        });
        sTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sTitleKeyTyped(evt);
            }
        });
        updateStaffTab.add(sTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, 120, -1));

        sSalaryLab.setText("Salary");
        updateStaffTab.add(sSalaryLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));
        updateStaffTab.add(sSalary, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 250, 110, -1));

        sHireLab.setText("Hire Date");
        updateStaffTab.add(sHireLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 250, -1, -1));

        sHireDate.setText("YYYY-MM-dd");
        sHireDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sHireDateActionPerformed(evt);
            }
        });
        updateStaffTab.add(sHireDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 250, 110, -1));

        addStaffButton.setBackground(new java.awt.Color(82, 113, 255));
        addStaffButton.setText("Add New Staff");
        addStaffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStaffButtonActionPerformed(evt);
            }
        });
        updateStaffTab.add(addStaffButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, 140, 40));

        sDocList.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT SSN from Doctor")));
        sDocList.setVisible(false);
        sDocList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sDocListActionPerformed(evt);
            }
        });
        updateStaffTab.add(sDocList, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 290, -1, -1));

        sTLSsn.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT SSN FROM TeamLead")));
        sTLSsn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sTLSsnActionPerformed(evt);
            }
        });
        updateStaffTab.add(sTLSsn, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 250, 110, -1));

        sDocListLab.setText("Nurse Works with");
        sDocListLab.setVisible(false);
        updateStaffTab.add(sDocListLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 290, -1, -1));

        sDocLic.setVisible(false);
        updateStaffTab.add(sDocLic, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 290, 70, -1));

        sNurseDegreeLab.setText("Nurse Degree");
        sNurseDegreeLab.setVisible(false);
        updateStaffTab.add(sNurseDegreeLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 290, -1, -1));

        sNurseDegree.setVisible(false);
        sNurseDegree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sNurseDegreeActionPerformed(evt);
            }
        });
        updateStaffTab.add(sNurseDegree, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 290, 70, -1));

        sPermLab.setText("Permanent");
        sPermLab.setVisible(false);
        updateStaffTab.add(sPermLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 290, -1, -1));
        updateStaffTab.add(sDeptNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 220, -1, -1));

        sHospNum.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT hNo from Hospital")));
        sHospNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sHospNumActionPerformed(evt);
            }
        });
        updateStaffTab.add(sHospNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 220, -1, -1));

        sDocLab.setText("Doctor License");
        sDocLab.setVisible(false);
        updateStaffTab.add(sDocLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 290, -1, -1));

        sGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F", "M" }));
        updateStaffTab.add(sGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 120, 90, -1));

        sSuperSsn.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT SSN FROM Supervisor")));
        sSuperSsn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sSuperSsnActionPerformed(evt);
            }
        });
        updateStaffTab.add(sSuperSsn, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 220, 110, -1));

        sClearButton.setBackground(new java.awt.Color(82, 113, 255));
        sClearButton.setText("Clear Fields");
        sClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sClearButtonActionPerformed(evt);
            }
        });
        updateStaffTab.add(sClearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 350, 140, 40));

        staffMultTab.addTab("Add New Staff", updateStaffTab);

        javax.swing.GroupLayout staffTabLayout = new javax.swing.GroupLayout(staffTab);
        staffTab.setLayout(staffTabLayout);
        staffTabLayout.setHorizontalGroup(
            staffTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, staffTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(staffMultTab, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
                .addContainerGap())
        );
        staffTabLayout.setVerticalGroup(
            staffTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, staffTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(staffMultTab)
                .addContainerGap())
        );

        tabs.addTab("Staff", staffTab);

        allPatients.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        patientTable.setModel(makeTable("SELECT SSN, CONCAT(fname,' ', mint,'. ', lname) as Name FROM Person p, Patient pat  WHERE p.SSN=pat.pSSN"));
        patientTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        patientTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        patientTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dispPatientTableBox.setViewportView(patientTable);

        allPatients.add(dispPatientTableBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 570, 230));

        patientInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        patientInfoTable.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        infoPatientTableBox.setViewportView(patientInfoTable);

        allPatients.add(infoPatientTableBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 570, 150));

        patientInfoButton.setText("More Info");
        patientInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientInfoButtonActionPerformed(evt);
            }
        });
        allPatients.add(patientInfoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 110, 30));

        patientUpdateButton.setText("Update Patient");
        patientUpdateButton.setEnabled(false);
        patientUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientUpdateButtonActionPerformed(evt);
            }
        });
        allPatients.add(patientUpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 260, 140, 30));

        pTreatments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(pTreatments);

        allPatients.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 520, 240, 100));

        pBills.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(pBills);

        allPatients.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 520, 300, 100));
        allPatients.add(pTreat, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 630, 120, -1));

        pTreatButton.setText("Add Treatment");
        pTreatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pTreatButtonActionPerformed(evt);
            }
        });
        allPatients.add(pTreatButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 630, -1, -1));

        pBillNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pBillNumActionPerformed(evt);
            }
        });
        allPatients.add(pBillNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 630, 50, -1));
        allPatients.add(pAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 630, 70, -1));

        pChargeButton.setText("Add Charge");
        pChargeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pChargeButtonActionPerformed(evt);
            }
        });
        allPatients.add(pChargeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 630, 90, -1));
        allPatients.add(pDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 630, 60, -1));

        pPhoneTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane8.setViewportView(pPhoneTable);

        allPatients.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 460, 180, 50));

        pContactTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane9.setViewportView(pContactTable);

        allPatients.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 460, 200, 50));

        pTotalCharge.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        pTotalCharge.setEnabled(false);
        jScrollPane10.setViewportView(pTotalCharge);

        allPatients.add(jScrollPane10, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 460, 170, 50));

        pDelete.setText("Delete Patient");
        pDelete.setEnabled(false);
        pDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pDeleteActionPerformed(evt);
            }
        });
        allPatients.add(pDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 260, 130, 30));

        patientMultTab.addTab("All Patients", allPatients);

        updatePatientTab.setBackground(new java.awt.Color(219, 196, 113));
        updatePatientTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pFNameLab.setText("First Name");
        updatePatientTab.add(pFNameLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));
        updatePatientTab.add(pFName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 180, -1));

        pMInitLab.setText("Middle I.");
        updatePatientTab.add(pMInitLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        pMInit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pMInitActionPerformed(evt);
            }
        });
        updatePatientTab.add(pMInit, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, 180, -1));

        pLNameLab.setText("Last Name");
        updatePatientTab.add(pLNameLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        pLName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pLNameActionPerformed(evt);
            }
        });
        updatePatientTab.add(pLName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, 180, -1));

        pGenLab.setText("Gender");
        updatePatientTab.add(pGenLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        pGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F", "M" }));
        updatePatientTab.add(pGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 120, 90, -1));

        pDobLab.setText("DOB");
        updatePatientTab.add(pDobLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 120, -1, -1));

        pDob.setColumns(10);
        pDob.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        pDob.setText("YYYY-MM-dd");
        updatePatientTab.add(pDob, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 120, 140, -1));

        pStreetLab.setText("Street");
        updatePatientTab.add(pStreetLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));
        updatePatientTab.add(pStreet, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 280, -1));

        pStreet2Lab.setText("Street 2");
        updatePatientTab.add(pStreet2Lab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));
        updatePatientTab.add(pStreet2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 180, 280, -1));

        pCityLab.setText("City");
        updatePatientTab.add(pCityLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 120, -1, -1));
        updatePatientTab.add(pCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 120, 160, -1));

        pStateLab.setText("State");
        updatePatientTab.add(pStateLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 150, -1, -1));

        pState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pStateActionPerformed(evt);
            }
        });
        updatePatientTab.add(pState, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 150, 150, -1));

        pZipLab.setText("Zip Code");
        updatePatientTab.add(pZipLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 180, -1, -1));

        pZip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pZipActionPerformed(evt);
            }
        });
        updatePatientTab.add(pZip, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 180, 130, -1));

        pInsLab.setText("Insurance");
        updatePatientTab.add(pInsLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, -1, -1));
        updatePatientTab.add(pInsurance, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 270, 210, -1));

        pSsnLab.setText("SSN");
        updatePatientTab.add(pSsnLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 30, -1, -1));

        pSsn.setText("#########");
        updatePatientTab.add(pSsn, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 30, 270, -1));

        pPhoneLab.setText("Phone Number");
        updatePatientTab.add(pPhoneLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 60, -1, -1));

        pPhone.setText("+1 ### ### ####");
        updatePatientTab.add(pPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 60, 210, -1));

        pEmergLab.setText("Emergency Contact");
        updatePatientTab.add(pEmergLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, -1, -1));

        pEmergency.setText("+1 ### ### ####");
        updatePatientTab.add(pEmergency, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 90, 190, -1));

        pDocSsnLab.setText("Doctor's SSN");
        updatePatientTab.add(pDocSsnLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 270, -1, -1));

        pHosNumLab.setText("Hospital Number");
        updatePatientTab.add(pHosNumLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        pRoomNoLab.setText("Room Number");
        updatePatientTab.add(pRoomNoLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 210, -1, -1));

        pTypeLab.setText("Patient Type");
        updatePatientTab.add(pTypeLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, -1, -1));

        pType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "IN", "OT", "ER" }));
        pType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pTypeKeyTyped(evt);
            }
        });
        updatePatientTab.add(pType, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 240, 110, -1));

        pCheckInLab.setText("Check-In");
        updatePatientTab.add(pCheckInLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 240, -1, -1));

        pCheckIn.setText("YYYY-MM-dd hh:mm:ss");
        updatePatientTab.add(pCheckIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 240, 120, -1));

        pCheckOutLab.setText("Check-Out");
        updatePatientTab.add(pCheckOutLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 240, -1, -1));

        pCheckOut.setText("YYYY-MM-dd hh:mm:ss");
        pCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pCheckOutActionPerformed(evt);
            }
        });
        updatePatientTab.add(pCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 240, 110, -1));

        addPatientButton.setBackground(new java.awt.Color(82, 113, 255));
        addPatientButton.setText("Add New Patient");
        addPatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPatientButtonActionPerformed(evt);
            }
        });
        updatePatientTab.add(addPatientButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 140, 40));

        pHospNum.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT hNo from Hospital")));
        pHospNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pHospNumActionPerformed(evt);
            }
        });
        updatePatientTab.add(pHospNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 210, -1, -1));

        updatePatientTab.add(pRoomNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 210, -1, -1));

        pDoc.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT SSN FROM Doctor")));
        pDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pDocActionPerformed(evt);
            }
        });
        updatePatientTab.add(pDoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 270, 130, -1));

        pClearButton.setBackground(new java.awt.Color(82, 113, 255));
        pClearButton.setText("Clear Fields");
        pClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pClearButtonActionPerformed(evt);
            }
        });
        updatePatientTab.add(pClearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 310, 140, 40));

        patientMultTab.addTab("Add New Patient", updatePatientTab);

        javax.swing.GroupLayout patientTabLayout = new javax.swing.GroupLayout(patientTab);
        patientTab.setLayout(patientTabLayout);
        patientTabLayout.setHorizontalGroup(
            patientTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(patientMultTab, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
                .addContainerGap())
        );
        patientTabLayout.setVerticalGroup(
            patientTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(patientMultTab)
                .addContainerGap())
        );

        tabs.addTab("Patient", patientTab);

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs)
                .addContainerGap())
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs)
                .addGap(45, 45, 45))
        );

        mainPanel.add(homePanel, "home");

        jScrollPane15.setViewportView(mainPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pMInitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pMInitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pMInitActionPerformed

    private void pLNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pLNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pLNameActionPerformed

    private void addPatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPatientButtonActionPerformed
        // TODO add your handling code here:
        try{
            
            String person = "";
            //SPLIT THIS UP INTO PROPER STATEMENTS!!
            
            // To Get information of New Staff
            
            boolean error = false;
            String[] per = new String[11];
            per[0] = pSsn.getText();
            per[1] = pFName.getText();
            per[2] = (pMInit.getText().isBlank() ? "null" : pMInit.getText());
            per[3] = pLName.getText();
            per[4] = pGender.getSelectedItem().toString();
            per[5] = pDob.getText();
            per[6] = pStreet.getText();
            per[7] = (pStreet2.getText().isBlank() ? "null" : pStreet2.getText());
            per[8] = pCity.getText();
            per[9] = pState.getText();
            per[10] = pZip.getText();
            
            for (int i = 0; i < per.length; i++){
                if (per[i].isBlank()){
                    error = true;
                    break;
                }
                else{
                    if (per[i].equals("null"))
                        person += per[i];
                    else
                        person += "'"+per[i]+"'";
                    if (i < per.length - 1) person+=",";
                }
            }
            
            String phone = "";
            if (pPhone.getText().isBlank())
                error = true;
            else
                phone = "'"+pSsn.getText()+"', '"+pPhone.getText()+"'";
            
            String emerg = "";
            if (pEmergency.getText().isBlank())
                error = true;
            else
                emerg = "'"+pSsn.getText()+"', '"+pEmergency.getText()+"'";
            
            // To Get information of New Patient

            String patient = "";
            String[] pat = new String[5];
            
            pat[0] = pSsn.getText();
            pat[1] = pInsurance.getText();
            pat[2] = pCheckIn.getText();
            pat[3] = pCheckOut.getText();
            pat[4] = pType.getSelectedItem().toString();
            
            for (int i = 0; i < pat.length; i++){
                if (pat[i].isBlank()){
                    error = true;
                    break;
                }
                else{
                    if (pat[i].equals("null"))
                        patient += pat[i];
                    else
                        patient += "'"+pat[i]+"'";
                    if (i < pat.length - 1) patient+=",";
                }
            }
            
            String care = "";
            String[] ca = new String[4];
            ca[0] = pSsn.getText();
            ca[1] = pDoc.getSelectedItem().toString();
            ca[2] = pRoomNum.getSelectedItem().toString();
            ca[3] = pHospNum.getSelectedItem().toString();
            
            for (int i = 0; i < ca.length; i++){
                if (ca[i].isBlank()){
                    error = true;
                    break;
                }
                else{
                    if (ca[i].equals("null"))
                        care += ca[i];
                    else
                        care += "'"+ca[i]+"'";
                    if (i < ca.length - 1) care+=",";
                }
            }
            
            
            
            
            
            if (error)
                JOptionPane.showMessageDialog(null, "Not all needed fields filled.", "Error", JOptionPane.ERROR_MESSAGE);
            else{
                System.out.println(person);
                System.out.println(phone);
                System.out.println(emerg);
                System.out.println(patient);
                System.out.println(care);
                
                s.insert("INSERT INTO Person VALUES ("+person+")");
                s.insert("INSERT INTO Person_PhoneNo VALUES ("+phone+")");
                s.insert("INSERT INTO Person_EmergencyContact VALUES ("+emerg+")");
                s.insert("INSERT INTO Patient VALUES ("+patient+")");
                s.insert("INSERT INTO Care VALUES ("+care+")");

                JOptionPane.showMessageDialog(null, "New Patient Added!", "", JOptionPane.PLAIN_MESSAGE);
                updateTables();
            }
        }catch (NullPointerException e){
            JOptionPane.showMessageDialog(null, "Not all needed fields filled.", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_addPatientButtonActionPerformed

    private void pStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pStateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pStateActionPerformed

    private void pCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pCheckOutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pCheckOutActionPerformed

    private void pZipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pZipActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pZipActionPerformed

    private void pTypeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pTypeKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_pTypeKeyTyped

    private void sMInitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sMInitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sMInitActionPerformed

    private void sLNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sLNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sLNameActionPerformed

    private void sStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sStateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sStateActionPerformed

    private void sZipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sZipActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sZipActionPerformed

    private void sTitleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sTitleKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_sTitleKeyTyped

    private void sHireDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sHireDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sHireDateActionPerformed

    private void addStaffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStaffButtonActionPerformed
        // TODO add your handling code here:
            try{
            String person = "";
            //SPLIT THIS UP INTO PROPER STATEMENTS!!
            
            // To Get information of New Staff
            
            boolean error = false;
            String[] per = new String[11];
            per[0] = sSsn.getText();
            per[1] = sFName.getText();
            per[2] = (sMInit.getText().isBlank() ? "null" : sMInit.getText());
            per[3] = sLName.getText();
            per[4] = sGender.getSelectedItem().toString();
            per[5] = sDob.getText();
            per[6] = sStreet.getText();
            per[7] = (sStreet2.getText().isBlank() ? "null" : sStreet2.getText());
            per[8] = sCity.getText();
            per[9] = sState.getText();
            per[10] = sZip.getText();
            
            for (int i = 0; i < per.length; i++){
                if (per[i].isBlank()){
                    error = true;
                    break;
                }
                else{
                    if (per[i].equals("null"))
                        person += per[i];
                    else
                        person += "'"+per[i]+"'";
                    if (i < per.length - 1) person+=",";
                }
            }
            
            String phone = "";
            if (sPhone.getText().isBlank())
                error = true;
            else
                phone = "'"+sSsn.getText()+"', '"+sPhone.getText()+"'";
            
            String emerg = "";
            if (sEmergency.getText().isBlank())
                error = true;
            else
                emerg = "'"+sSsn.getText()+"', '"+sEmergency.getText()+"'";
            
            String staff = "";
            String[] st = new String[8];
            
            st[0] = sSsn.getText();
            st[1] = sTitle.getSelectedItem().toString();
            st[2] = sSalary.getText();
            st[3] = sHireDate.getText();
            st[4] = (sTLSsn.getSelectedItem() == null ? "null" : sTLSsn.getSelectedItem().toString());
            st[5] = (sSuperSsn.getSelectedItem() == null ? "null" : sSuperSsn.getSelectedItem().toString());
            st[6] = sHospNum.getSelectedItem().toString();
            st[7] = sDeptNum.getSelectedItem().toString();
            
            for (int i = 0; i < st.length; i++){
                if (st[i].isBlank()){
                    error = true;
                    break;
                }
                else{
                    if (st[i].equals("null"))
                        staff += st[i];
                    else
                        staff += "'"+st[i]+"'";
                    if (i < st.length - 1) staff+=",";
                }
            }
            
            String title = sTitle.getSelectedItem().toString();
            String nurse = "";
            String nurseDoc = "";
            String doctorLic = "";
            String doctor = "";
            
            if (title.equals("Nurse")){
                if (sNurseDegree.getText().isBlank() || sDocList.getSelectedItem() == null)
                    error = true;
                else{
                    nurse = "'"+sSsn.getText()+"', '"+sNurseDegree.getText()+"'";
                    nurseDoc = "'"+sDocList.getSelectedItem().toString()+"', '"+sSsn.getText()+"'";
                }
            }
            else if (title.equals("Doctor")){
                if (sDocLic.getText().isBlank())
                    error = true;
                else
                    doctorLic = "'"+sSsn.getText()+"', '"+sDocLic.getText()+"'";
                
                if (sPerm.getSelectedItem() == null)
                    error = true;
                else
                    doctor = "'"+sSsn.getText()+"', '"+sPerm.getSelectedItem().toString()+"'";
            }
            
            
            
            if (error)
                JOptionPane.showMessageDialog(null, "Not all needed fields filled.", "Error", JOptionPane.ERROR_MESSAGE);
            else{
                System.out.println(person);
                System.out.println(phone);
                System.out.println(emerg);
                System.out.println(staff);
                System.out.println(nurse);
                System.out.println(nurseDoc);
                
                s.insert("INSERT INTO Person VALUES ("+person+")");
                s.insert("INSERT INTO Person_PhoneNo VALUES ("+phone+")");
                s.insert("INSERT INTO Person_EmergencyContact VALUES ("+emerg+")");
                s.insert("INSERT INTO Staff VALUES ("+staff+")");

                
                switch (title){
                    case "Nurse":
                        s.insert("INSERT INTO Nurse VALUES ("+nurse+")");
                        s.insert("INSERT INTO Doctor_Nurse_Assist VALUES ("+nurseDoc+")");
                        break;
                    case "Doctor":
                        s.insert("INSERT INTO Doctor VALUES ("+doctor+")");
                        s.insert("INSERT INTO Doctor_License VALUES ("+doctorLic+")");
                        sDocList.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT SSN from Doctor")));
                        pDoc.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT SSN FROM Doctor")));
                        break;
                    case "Manager":
                        s.insert("INSERT INTO Manager VALUES ('"+sSsn.getText()+"')");
                        hManagerList.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT SSN FROM Manager")));
                        break;
                    case "Director":
                        s.insert("INSERT INTO Director VALUES ('"+sSsn.getText()+"')");
                        hDirectorList.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT SSN FROM Director")));
                        break;
                    case "Supervisor":
                        s.insert("INSERT INTO Supervisor VALUES ('"+sSsn.getText()+"')");
                        sSuperSsn.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT SSN FROM Supervisor")));
                        break;
                    case "Team Lead":
                        s.insert("INSERT INTO TeamLead VALUES ('"+sSsn.getText()+"')");
                        sTLSsn.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT SSN FROM TeamLead")));
                        break;
                    default:
                        break;
                }
                
                JOptionPane.showMessageDialog(null, "New Staff Added!", "", JOptionPane.PLAIN_MESSAGE);
                
                updateTables();
            }

            }catch(NullPointerException e){
                JOptionPane.showMessageDialog(null, "Not all needed fields filled.", "Error", JOptionPane.ERROR_MESSAGE);
                //System.err.print(e);
            }

    }//GEN-LAST:event_addStaffButtonActionPerformed

    public void updateTables(){
        staffTable.setModel(makeTable("SELECT DISTINCT SSN, CONCAT(fname,' ', mint,'. ', lname) as Name, title as Title FROM Staff, Person WHERE SSN=eSSN"));
        patientTable.setModel(makeTable("SELECT SSN, CONCAT(fname,' ', mint,'. ', lname) as Name FROM Person p, Patient pat  WHERE p.SSN=pat.pSSN")); 
    }
    
    
    
    private void staffInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffInfoButtonActionPerformed
        // TODO add your handling code here:
        int selected = staffTable.getSelectedRow();
        if (selected > -1){
        String SSN = (String)staffTable.getValueAt(selected, 0);
        String title = (String)staffTable.getValueAt(selected, 2);

        
        sPhones.setModel(makeTable("SELECT phoneNo FROM Person, Person_PhoneNo WHERE SSN = '"+SSN+"' AND SSN=perSSN"));
        sContact.setModel(makeTable("SELECT emergencyConact FROM Person, Person_EmergencyContact WHERE SSN = '"+SSN+"' AND SSN=perSSN"));
        
        staffUpdateButton.setEnabled(true);
        sDelete.setEnabled(true);
        
        if (title.equals("Doctor")){
            staffInfoTable.setModel(makeDataTable("SELECT *, TIMESTAMPDIFF(YEAR, dob, CURDATE()) AS Age FROM Person p, Staff s, Doctor d WHERE p.SSN='"+SSN+"' AND s.eSSN=p.SSN AND p.SSN = d.SSN"));

            sExtraInfo.setModel(makeTable("SELECT patSSN as Patient, room as Room, hospital as Hospital, TIMESTAMPDIFF(YEAR, p.dob, CURDATE()) AS 'Patient Age' FROM Doctor d, Care c, Person p WHERE d.SSN='"+SSN+"' AND d.SSN = c.dSSN AND c.patSSN = p.SSN"));
            sExtraInfo2.setModel(makeTable("SELECT medicalLicense as Licenses FROM Doctor_License WHERE docSSN='"+SSN+"'"));            

        }
        else if (title.equals("Nurse")){
            staffInfoTable.setModel(makeDataTable("SELECT *, TIMESTAMPDIFF(YEAR, dob, CURDATE()) AS Age FROM Person p, Staff s, Nurse d WHERE p.SSN='"+SSN+"' AND s.eSSN=p.SSN AND p.SSN = d.SSN"));

            sExtraInfo.setModel(makeTable("SELECT docSSN as 'Doctors Assisting' FROM Doctor_Nurse_Assist WHERE nSSN = '"+SSN+"'"));
            sExtraInfo2.setModel(new javax.swing.table.DefaultTableModel(new Object [][] {{},{},{},{}},new String [] {}));
        }
        else{            
            staffInfoTable.setModel(makeDataTable("SELECT *, TIMESTAMPDIFF(YEAR, dob, CURDATE()) AS Age FROM Person, Staff WHERE SSN='"+SSN+"' AND eSSN=SSN"));

            sExtraInfo.setModel(new javax.swing.table.DefaultTableModel(new Object [][] {{},{},{},{}},new String [] {}));
            sExtraInfo2.setModel(new javax.swing.table.DefaultTableModel(new Object [][] {{},{},{},{}},new String [] {}));
        }
        }else{
            JOptionPane.showMessageDialog(null, "No staff member selected.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_staffInfoButtonActionPerformed

    private void patientInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientInfoButtonActionPerformed
        // TODO add your handling code here:
        int selected = patientTable.getSelectedRow();
        if (selected > -1){
        String SSN = (String)patientTable.getValueAt(selected, 0);
        
        pPhoneTable.setModel(makeTable("SELECT phoneNo FROM Person, Person_PhoneNo WHERE SSN = '"+SSN+"' AND SSN=perSSN"));
        pContactTable.setModel(makeTable("SELECT emergencyConact FROM Person, Person_EmergencyContact WHERE SSN = '"+SSN+"' AND SSN=perSSN"));
        
        patientInfoTable.setModel(makeDataTable("SELECT * , TIMESTAMPDIFF(YEAR, dob, CURDATE()) AS Age FROM Person, Patient WHERE SSN='"+SSN+"' AND pSSN=SSN"));
        pTreatments.setModel(makeTable("SELECT treatment as Treatment FROM Person, Care_Treatment WHERE SSN='"+SSN+"' AND SSN=pSSN"));
        pBills.setModel(makeTable("SELECT bill as 'Bill Number', description as 'Description', amount as Amount FROM Person, Bill_Charges WHERE SSN='"+SSN+"' AND SSN=pSSN;"));
        
        pTotalCharge.setModel(makeTable("SELECT SUM(bc.amount) as 'Total Charge' FROM Person p, Patient pat, Bill_Charges bc WHERE p.SSN = '"+SSN+"' AND p.SSN=pat.pSSN AND p.SSN=bc.pSSN GROUP BY SSN"));
        patientUpdateButton.setEnabled(true);
        pDelete.setEnabled(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "No patient selected.", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_patientInfoButtonActionPerformed

    private void sDocListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sDocListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sDocListActionPerformed

    private void sTLSsnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sTLSsnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sTLSsnActionPerformed

    private void pHospNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pHospNumActionPerformed
        // TODO add your handling code here:
        if (pHospNum.getSelectedItem() != null)
            pRoomNum.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT DISTINCT rNo from Room, Hospital WHERE hNum = "+pHospNum.getSelectedItem().toString()+"")));
        else
            pRoomNum.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{""}));

    }//GEN-LAST:event_pHospNumActionPerformed

    private void pDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pDocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pDocActionPerformed

    private void sNurseDegreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sNurseDegreeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sNurseDegreeActionPerformed

    private void sHospNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sHospNumActionPerformed
        // TODO add your handling code here:
        if (sHospNum.getSelectedItem() != null)
            sDeptNum.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT DISTINCT dNo from Department, Hospital WHERE hNum = "+sHospNum.getSelectedItem().toString()+"")));
        else
            sDeptNum.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{""}));
    }//GEN-LAST:event_sHospNumActionPerformed

    private void sPermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sPermActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sPermActionPerformed

    private void sTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sTitleActionPerformed
        // TODO add your handling code here:
        
        String title = (sTitle.getSelectedItem() == null ? "" : sTitle.getSelectedItem().toString());
        
        sDocLic.setVisible(false);
        sDocLab.setVisible(false);
        sPermLab.setVisible(false);
        sPerm.setVisible(false);
        sDocList.setVisible(false);
        sDocListLab.setVisible(false);
        sNurseDegree.setVisible(false);
        sNurseDegreeLab.setVisible(false);
        
        
        if (title.equals("Nurse")){
            sDocList.setVisible(true);
            sDocListLab.setVisible(true);
            sNurseDegree.setVisible(true);
            sNurseDegreeLab.setVisible(true);
            
        }
        else if (title.equals ("Doctor")){
            sDocLic.setVisible(true);
            sDocLab.setVisible(true);
            sPermLab.setVisible(true);
            sPerm.setVisible(true);
        }
    }//GEN-LAST:event_sTitleActionPerformed

    private void sSuperSsnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sSuperSsnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sSuperSsnActionPerformed

    private void sClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sClearButtonActionPerformed
        // TODO add your handling code here:
        sSsn.setText("#########");
        sFName.setText("");
        sMInit.setText("");
        sLName.setText("");
        sPhone.setText("+# ### ### ####");
        sEmergency.setText("+# ### ### ####");
        sDob.setText("YYYY-MM-dd");
        sStreet.setText("");
        sStreet2.setText("");
        sCity.setText("");
        sState.setText("");
        sZip.setText("");
        sSalary.setText("");
        sHireDate.setText("YYYY-MM-dd");
        sDocLic.setText("");
        sNurseDegree.setText("");
        
        sDeptNum.setSelectedIndex(-1);
        sHospNum.setSelectedIndex(-1);
        sGender.setSelectedIndex(-1);
        sPerm.setSelectedIndex(-1);
        sTitle.setSelectedIndex(-1);
        sTLSsn.setSelectedIndex(-1);
        sSuperSsn.setSelectedIndex(-1);
        sDocList.setSelectedIndex(-1);
    }//GEN-LAST:event_sClearButtonActionPerformed

    private void pTreatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pTreatButtonActionPerformed
        // TODO add your handling code here:
        String treat = pTreat.getText();
        String SSN = patientInfoTable.getValueAt(0,1).toString();
        
        String[] ca = makeList2("SELECT * FROM Care WHERE patSSN = '"+SSN+"'");
        String care = "'"+ca[0]+"','"+ca[1]+"','"+ca[2]+"','"+ca[3]+"','"+treat+"'";
        
        System.out.println(care);
        s.insert("INSERT INTO Care_Treatment VALUES("+care+")");
        pTreatments.setModel(makeTable("SELECT treatment as Treatment FROM Person, Care_Treatment WHERE SSN='"+SSN+"' AND SSN=pSSN"));
    }//GEN-LAST:event_pTreatButtonActionPerformed

    private void pBillNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pBillNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pBillNumActionPerformed

    private void pChargeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pChargeButtonActionPerformed
        // TODO add your handling code here:
        boolean exists = false;
        String bNo = pBillNum.getText();
        String description = pDescription.getText();
        String amount = pAmount.getText();
        
        String SSN = patientInfoTable.getValueAt(0,1).toString();
        
        String bill = "'"+bNo+"','"+SSN+"'";
        String charge = bill+",'"+description+"','"+amount+"'";
        
        System.out.println(charge);
        
        String[] bills = makeList("SELECT bNo FROM Bill WHERE patSSN ='"+SSN+"'");
        
        for (String i:bills){
            if (bNo.equals(i))
                exists = true;
        }
        
        if (exists)
            s.insert("INSERT INTO Bill_Charges VALUES("+charge+")");
        else{
            s.insert("INSERT INTO Bill VALUES("+bill+")");
            s.insert("INSERT INTO Bill_Charges VALUES("+charge+")");
        }
        pBills.setModel(makeTable("SELECT bill as 'Bill Number', description as 'Description', amount as Amount FROM Person, Bill_Charges WHERE SSN='"+SSN+"' AND SSN=pSSN;"));
        pTotalCharge.setModel(makeTable("SELECT SUM(bc.amount) as 'Total Charge' FROM Person p, Patient pat, Bill_Charges bc WHERE p.SSN = '"+SSN+"' AND p.SSN=pat.pSSN AND p.SSN=bc.pSSN GROUP BY SSN"));

    }//GEN-LAST:event_pChargeButtonActionPerformed

    private void staffUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffUpdateButtonActionPerformed
        // TODO add your handling code here:
        if (staffTable.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, "No staff member selected.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            int num = staffInfoTable.getRowCount();
            boolean error = false;

            String[] up = new String[num];

            for (int i = 0; i< num; i++){
                up[i] = (staffInfoTable.getValueAt(i, 1) == null ? "null" : staffInfoTable.getValueAt(i, 1).toString());
            }

            for (int i = 0; i < up.length; i++){
                if (up[i].isBlank()){
                    error = true;
                    break;
                }
                else{
                    if (!up[i].equals("null"))
                        up[i] = "'"+up[i]+"'";
                }
            }

            String person = "fName = "+up[1]
                    + ",mInt = "+up[2]
                    + ",lName = "+up[3]
                    + ",gender = "+up[4]
                    + ",dob = "+up[5]
                    + ",street = "+up[6]
                    + ",street2 = "+up[7]
                    + ",city = "+up[8]
                    + ",state = "+up[9]
                    + ",zipcode = "+up[10];
            
            String staff = "title ="+up[12]
                    + ",salary = "+up[13]
                    + ",hireDate = "+up[14]
                    + ",tlSSN = "+up[15]
                    + ",superSSN = "+up[16]
                    + ",hNo = "+up[17]
                    + ",dNo = "+up[18];
            
            
            if (error){
                JOptionPane.showMessageDialog(null, "Error occured.", "", JOptionPane.ERROR_MESSAGE);
            }
            else{
                s.insert("UPDATE Person SET "+person+"WHERE SSN="+up[0]);
                s.insert("UPDATE Staff SET "+staff +"WHERE eSSN="+up[0]);
                
                staffInfoTable.setModel(makeDataTable("SELECT *, TIMESTAMPDIFF(YEAR, dob, CURDATE()) AS Age FROM Person, Staff WHERE SSN="+up[0]+" AND eSSN=SSN"));
                updateTables();
                
                JOptionPane.showMessageDialog(null, "Staff info updated!", "", JOptionPane.PLAIN_MESSAGE);

            }
        }
    }//GEN-LAST:event_staffUpdateButtonActionPerformed

    private void patientUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientUpdateButtonActionPerformed
        // TODO add your handling code here:
        if (patientTable.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, "No patient selected.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            int num = patientInfoTable.getRowCount();
            boolean error = false;

            String[] up = new String[num];

            for (int i = 0; i< num; i++){
                up[i] = (patientInfoTable.getValueAt(i, 1) == null ? "null" : patientInfoTable.getValueAt(i, 1).toString());
            }

            for (int i = 0; i < up.length; i++){
                if (up[i].isBlank()){
                    error = true;
                    break;
                }
                else{
                    if (!up[i].equals("null"))
                        up[i] = "'"+up[i]+"'";
                }
            }

            String person = "fName = "+up[1]
                    + ",mInt = "+up[2]
                    + ",lName = "+up[3]
                    + ",gender = "+up[4]
                    + ",dob = "+up[5]
                    + ",street = "+up[6]
                    + ",street2 = "+up[7]
                    + ",city = "+up[8]
                    + ",state = "+up[9]
                    + ",zipcode = "+up[10];
            
            String patient = "healthInsurance ="+up[12]
                    + ",checkInTime = "+up[13]
                    + ",checkOutTime = "+up[14]
                    + ",pType = "+up[15];
            
            
            if (error){
                JOptionPane.showMessageDialog(null, "Error occured.", "", JOptionPane.ERROR_MESSAGE);
            }
            else{
                s.insert("UPDATE Person SET "+person+"WHERE SSN="+up[0]);
                s.insert("UPDATE Patient SET "+patient +"WHERE pSSN="+up[0]);
                patientInfoTable.setModel(makeDataTable("SELECT * , TIMESTAMPDIFF(YEAR, dob, CURDATE()) AS Age FROM Person, Patient WHERE SSN="+up[0]+" AND pSSN=SSN"));
                updateTables();
                JOptionPane.showMessageDialog(null, "Patient info updated!", "", JOptionPane.PLAIN_MESSAGE);

            }
        }
    }//GEN-LAST:event_patientUpdateButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        pass = new String(passField.getPassword());
        if ("medadmin".equals(username) && "0000".equals(pass)) {
            CardLayout cl = (CardLayout) mainPanel.getLayout();
            cl.show(mainPanel, "home");
        } else {
            JOptionPane.showMessageDialog(mainPanel, "Incorrect login information", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    private void passFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passFieldActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void userFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_userFieldPropertyChange
        try {
            userField.commitEdit();
            username = userField.getText();
        } catch (ParseException ex) {
            Logger.getLogger(Homepage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_userFieldPropertyChange

    private void sDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sDeleteActionPerformed
        // TODO add your handling code here:
        if (staffTable.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, "No staff member selected.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            int num = staffInfoTable.getRowCount();
            String SSN = staffInfoTable.getValueAt(0,1).toString();
            String title = staffInfoTable.getValueAt(12,1).toString();
            System.out.println(title);
            
            if(title.equals("Doctor")){
                s.insert("DELETE FROM Doctor_License WHERE docSSN='"+SSN+"'");
                s.insert("DELETE FROM Doctor_Nurse_Assist WHERE docSSN='"+SSN+"'");
                s.insert("DELETE FROM Care_Treatment WHERE docSSN='"+SSN+"'");
                s.insert("DELETE FROM Care WHERE dSSN='"+SSN+"'");
                s.insert("DELETE FROM Doctor WHERE SSN='"+SSN+"'");
            }
            else if (title.equals("Nurse")){
                s.insert("DELETE FROM Doctor_Nurse_Assist WHERE nSSN='"+SSN+"'");
                s.insert("DELETE FROM Nurse WHERE SSN='"+SSN+"'");
            }
            else if (title.equals("Team Lead")){
                s.insert("UPDATE Staff SET tlSSN=NULL WHERE tlSSN='"+SSN+"'");
                s.insert("DELETE FROM TeamLead WHERE SSN='"+SSN+"'");
            }
            else if (title.equals("Supervisor")){
                s.insert("UPDATE Staff SET superSSN=NULL WHERE superSSN='"+SSN+"'");
                s.insert("DELETE FROM Supervisor WHERE SSN='"+SSN+"'");
            }
            else if (title.equals("Manager")){
                s.insert("UPDATE Department SET mSSN=NULL WHERE mSSN='"+SSN+"'");
                s.insert("DELETE FROM Manager WHERE SSN='"+SSN+"'");
            }
            else if (title.equals("Director")){
                s.insert("UPDATE Department SET dirSSN=NULL WHERE dirSSN='"+SSN+"'");
                s.insert("DELETE FROM Manager WHERE SSN='"+SSN+"'");
            }
            
            s.insert("DELETE FROM Staff WHERE eSSN='"+SSN+"'");
            s.insert("DELETE FROM Person_PhoneNo WHERE perSSN='"+SSN+"'");
            s.insert("DELETE FROM Person_EmergencyContact WHERE perSSN='"+SSN+"'");
            s.insert("DELETE FROM Person WHERE SSN='"+SSN+"'");
            
            updateTables();
            JOptionPane.showMessageDialog(null, "Staff Member Deleted.");
        }
    }//GEN-LAST:event_sDeleteActionPerformed

    private void pDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pDeleteActionPerformed
        // TODO add your handling code here:        
        if (patientTable.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, "No patient selected.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            String SSN = patientInfoTable.getValueAt(0,1).toString();

            
            s.insert("DELETE FROM Bill_Charges WHERE pSSN='"+SSN+"'");
            s.insert("DELETE FROM Bill WHERE patSSN='"+SSN+"'");
            s.insert("DELETE FROM Care_Treatment WHERE pSSN='"+SSN+"'");
            s.insert("DELETE FROM Care WHERE patSSN='"+SSN+"'");
            s.insert("DELETE FROM Patient WHERE pSSN='"+SSN+"'");
            s.insert("DELETE FROM Person_PhoneNo WHERE perSSN='"+SSN+"'");
            s.insert("DELETE FROM Person_EmergencyContact WHERE perSSN='"+SSN+"'");
            s.insert("DELETE FROM Person WHERE SSN='"+SSN+"'");
            
            updateTables();
            JOptionPane.showMessageDialog(null, "Patient Deleted.");
        }
    }//GEN-LAST:event_pDeleteActionPerformed

    private void hDirectorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hDirectorButtonActionPerformed
        // TODO add your handling code here:
        try{
            String hNo = hDepartments.getValueAt(0,0).toString();
            String dept = hDeptList.getSelectedItem().toString();
            String dir;
            try {dir = hDirectorList.getSelectedItem().toString();} catch(NullPointerException e){ dir="null";}

            if (!dir.equals("null")) dir = "'"+dir+"'";
            s.insert("UPDATE Department SET dirSSN = NULL WHERE dirSSN ="+dir);
            s.insert("UPDATE Department SET dirSSN = "+dir+" WHERE dNo ='"+dept+"'");

            hDepartments.setModel(makeTable("SELECT DISTINCT hNo as Hospital, dNo as Department, dName as Name, IFNULL(mSSN, 'No Manager') as Manager, IFNULL(dirSSN, 'No Director') as Director FROM Hospital h, Department d, Person p, Person p2 WHERE h.hNo='"+hNo+"' AND h.hNo=d.hNum"));

        }
        catch (NullPointerException e){
            JOptionPane.showMessageDialog(null, "Not all fields selected.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_hDirectorButtonActionPerformed

    private void hManagerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hManagerButtonActionPerformed
        // TODO add your handling code here:
        try{
            String hNo = hDepartments.getValueAt(0,0).toString();
            String dept = hDeptList.getSelectedItem().toString();
            String mgr;
            try {mgr = hManagerList.getSelectedItem().toString();} catch(NullPointerException e){ mgr="null";}

            if (!mgr.equals("null")) mgr = "'"+mgr+"'";
            s.insert("UPDATE Department SET mSSN = NULL WHERE mSSN ="+mgr);
            s.insert("UPDATE Department SET mSSN = "+mgr+" WHERE dNo ='"+dept+"'");

            hDepartments.setModel(makeTable("SELECT DISTINCT hNo as Hospital, dNo as Department, dName as Name, IFNULL(mSSN, 'No Manager') as Manager, IFNULL(dirSSN, 'No Director') as Director FROM Hospital h, Department d, Person p, Person p2 WHERE h.hNo='"+hNo+"' AND h.hNo=d.hNum"));

        }
        catch (NullPointerException e){
            JOptionPane.showMessageDialog(null, "Not all fields selected.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_hManagerButtonActionPerformed

    private void hButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hButtonActionPerformed
        // TODO add your handling code here:

        int selected = hospitalTable.getSelectedRow();
        String num = (String)hospitalTable.getValueAt(selected, 0);
        hDepartments.setModel(makeTable("SELECT DISTINCT hNo as Hospital, dNo as Department, dName as Name, IFNULL(mSSN, 'No Manager') as Manager, IFNULL(dirSSN, 'No Director') as Director FROM Hospital h, Department d, Person p, Person p2 WHERE h.hNo='"+num+"' AND h.hNo=d.hNum"));

        hTypes.setModel(makeTable("SELECT ptype as 'Patient Type', COUNT(*) as 'Number of Patients' FROM Hospital h, Staff s, Doctor doc, Care c, Patient p WHERE h.hNo='"+num+"' AND h.hNo=s.hNo AND s.eSSN=doc.SSN AND doc.SSN=c.dSSN AND c.patSSN=p.pSSN GROUP BY pType;"));

        hManagerButton.setEnabled(true);
        hManagerList.setEnabled(true);
        hDeptList.setEnabled(true);
        hDirectorList.setEnabled(true);
        hDirectorButton.setEnabled(true);

        if (selected > -1)
        hDeptList.setModel(new javax.swing.DefaultComboBoxModel<>(makeList("SELECT DISTINCT dNo from Department, Hospital WHERE hNum = '"+num+"'")));

        else
        hDeptList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{""}));
    }//GEN-LAST:event_hButtonActionPerformed

    private void pClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pClearButtonActionPerformed
        // TODO add your handling code here:
        pSsn.setText("#########");
        pFName.setText("");
        pMInit.setText("");
        pLName.setText("");
        pPhone.setText("+# ### ### ####");
        pEmergency.setText("+# ### ### ####");
        pDob.setText("YYYY-MM-dd");
        pStreet.setText("");
        pStreet2.setText("");
        pCity.setText("");
        pState.setText("");
        pZip.setText("");
        pCheckIn.setText("YYYY-MM-dd hh:mm:ss");
        pCheckOut.setText("YYYY-MM-dd hh:mm:ss");
        pInsurance.setText("");
        
        pHospNum.setSelectedIndex(-1);
        pRoomNum.setSelectedIndex(-1);
        sGender.setSelectedIndex(-1);
        pDoc.setSelectedIndex(-1);
        pType.setSelectedIndex(-1);
    }//GEN-LAST:event_pClearButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    static DBSQL s = new DBSQL();
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Homepage().setVisible(true);
            }
        });
    }
    
    public static DefaultTableModel makeTable(String query){
        DefaultTableModel table = s.makeTable(s.get(query));

        return table;
    }
    
    public static DefaultTableModel makeDataTable(String query){
        DefaultTableModel table = s.makeDataTable(s.get(query));

        return table;
    }
    
    public static String[] makeList(String query){
        String[] list = s.getList(s.get(query));
        return list;
    }
    
    public static String[] makeList2(String query){
        String[] list = s.getList2(s.get(query));
        return list;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPatientButton;
    private javax.swing.JButton addStaffButton;
    private javax.swing.JPanel allPatients;
    private javax.swing.JPanel allStaff;
    private javax.swing.JScrollPane dispPatientTableBox;
    private javax.swing.JScrollPane dispStaffTableBox;
    private javax.swing.JButton hButton;
    private javax.swing.JTable hDepartments;
    private javax.swing.JComboBox<String> hDeptList;
    private javax.swing.JButton hDirectorButton;
    private javax.swing.JComboBox<String> hDirectorList;
    private javax.swing.JButton hManagerButton;
    private javax.swing.JComboBox<String> hManagerList;
    private javax.swing.JTable hTypes;
    private javax.swing.JPanel homePanel;
    private javax.swing.JPanel hospitalTab;
    private javax.swing.JTable hospitalTable;
    private javax.swing.JScrollPane infoPatientTableBox;
    private javax.swing.JScrollPane infoStaffTableBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    public javax.swing.JLabel loginLabel;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField pAmount;
    private javax.swing.JTextField pBillNum;
    private javax.swing.JTable pBills;
    private javax.swing.JButton pChargeButton;
    private javax.swing.JTextField pCheckIn;
    private javax.swing.JLabel pCheckInLab;
    private javax.swing.JTextField pCheckOut;
    private javax.swing.JLabel pCheckOutLab;
    private javax.swing.JTextField pCity;
    private javax.swing.JLabel pCityLab;
    private javax.swing.JButton pClearButton;
    private javax.swing.JTable pContactTable;
    private javax.swing.JButton pDelete;
    private javax.swing.JTextField pDescription;
    private javax.swing.JFormattedTextField pDob;
    private javax.swing.JLabel pDobLab;
    private javax.swing.JComboBox<String> pDoc;
    private javax.swing.JLabel pDocSsnLab;
    private javax.swing.JLabel pEmergLab;
    private javax.swing.JTextField pEmergency;
    private javax.swing.JTextField pFName;
    private javax.swing.JLabel pFNameLab;
    private javax.swing.JLabel pGenLab;
    private javax.swing.JComboBox<String> pGender;
    private javax.swing.JLabel pHosNumLab;
    private javax.swing.JComboBox<String> pHospNum;
    private javax.swing.JLabel pInsLab;
    private javax.swing.JTextField pInsurance;
    private javax.swing.JTextField pLName;
    private javax.swing.JLabel pLNameLab;
    private javax.swing.JTextField pMInit;
    private javax.swing.JLabel pMInitLab;
    private javax.swing.JTextField pPhone;
    private javax.swing.JLabel pPhoneLab;
    private javax.swing.JTable pPhoneTable;
    private javax.swing.JLabel pRoomNoLab;
    private javax.swing.JComboBox<String> pRoomNum;
    private javax.swing.JTextField pSsn;
    private javax.swing.JLabel pSsnLab;
    private javax.swing.JTextField pState;
    private javax.swing.JLabel pStateLab;
    private javax.swing.JTextField pStreet;
    private javax.swing.JTextField pStreet2;
    private javax.swing.JLabel pStreet2Lab;
    private javax.swing.JLabel pStreetLab;
    private javax.swing.JTable pTotalCharge;
    private javax.swing.JTextField pTreat;
    private javax.swing.JButton pTreatButton;
    private javax.swing.JTable pTreatments;
    private javax.swing.JComboBox<String> pType;
    private javax.swing.JLabel pTypeLab;
    private javax.swing.JTextField pZip;
    private javax.swing.JLabel pZipLab;
    private javax.swing.JPasswordField passField;
    private javax.swing.JButton patientInfoButton;
    private javax.swing.JTable patientInfoTable;
    private javax.swing.JTabbedPane patientMultTab;
    private javax.swing.JPanel patientTab;
    private javax.swing.JTable patientTable;
    private javax.swing.JButton patientUpdateButton;
    private javax.swing.JTextField sCity;
    private javax.swing.JLabel sCityLab;
    private javax.swing.JButton sClearButton;
    private javax.swing.JTable sContact;
    private javax.swing.JButton sDelete;
    private javax.swing.JComboBox<String> sDeptNum;
    private javax.swing.JLabel sDeptNumLab;
    private javax.swing.JFormattedTextField sDob;
    private javax.swing.JLabel sDobLab;
    private javax.swing.JLabel sDocLab;
    private javax.swing.JTextField sDocLic;
    private javax.swing.JComboBox<String> sDocList;
    private javax.swing.JLabel sDocListLab;
    private javax.swing.JLabel sEmergLab;
    private javax.swing.JTextField sEmergency;
    private javax.swing.JTable sExtraInfo;
    private javax.swing.JTable sExtraInfo2;
    private javax.swing.JTextField sFName;
    private javax.swing.JLabel sFNameLab;
    private javax.swing.JLabel sGenLab;
    private javax.swing.JComboBox<String> sGender;
    private javax.swing.JTextField sHireDate;
    private javax.swing.JLabel sHireLab;
    private javax.swing.JLabel sHosNumLab;
    private javax.swing.JComboBox<String> sHospNum;
    private javax.swing.JTextField sLName;
    private javax.swing.JLabel sLNameLab;
    private javax.swing.JTextField sMInit;
    private javax.swing.JLabel sMInitLab;
    private javax.swing.JTextField sNurseDegree;
    private javax.swing.JLabel sNurseDegreeLab;
    private javax.swing.JComboBox<String> sPerm;
    private javax.swing.JLabel sPermLab;
    private javax.swing.JTextField sPhone;
    private javax.swing.JLabel sPhoneLab;
    private javax.swing.JTable sPhones;
    private javax.swing.JTextField sSalary;
    private javax.swing.JLabel sSalaryLab;
    private javax.swing.JTextField sSsn;
    private javax.swing.JLabel sSsnLab;
    private javax.swing.JTextField sState;
    private javax.swing.JLabel sStateLab;
    private javax.swing.JTextField sStreet;
    private javax.swing.JTextField sStreet2;
    private javax.swing.JLabel sStreet2Lab;
    private javax.swing.JLabel sStreetLab;
    private javax.swing.JComboBox<String> sSuperSsn;
    private javax.swing.JLabel sSuperSsnLab;
    private javax.swing.JComboBox<String> sTLSsn;
    private javax.swing.JLabel sTeamLeadLab;
    private javax.swing.JComboBox<String> sTitle;
    private javax.swing.JLabel sTitleLab;
    private javax.swing.JTextField sZip;
    private javax.swing.JLabel sZipLab;
    private javax.swing.JButton staffInfoButton;
    private javax.swing.JTable staffInfoTable;
    private javax.swing.JTabbedPane staffMultTab;
    private javax.swing.JPanel staffTab;
    private javax.swing.JTable staffTable;
    private javax.swing.JButton staffUpdateButton;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JPanel updatePatientTab;
    private javax.swing.JPanel updateStaffTab;
    private javax.swing.JFormattedTextField userField;
    // End of variables declaration//GEN-END:variables
}
